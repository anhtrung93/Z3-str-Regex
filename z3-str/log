Input file: /tmp/z3_str_convert/verify_conv_matches-004


Input loaded:
-----------------------------------------------
(and (= true (Matches x __cOnStStR__x67_x72_x5b_x65_x5d_x79))
     (= true (Matches x __cOnStStR__x67_x72_x28_x61_x7c_x65_x29_x79))
     (= true
        (Matches x __cOnStStR__x28_x67_x72_x61_x79_x7c_x67_x72_x65_x79_x29))
     (= x __cOnStStR__x67_x72_x65_x79))
-----------------------------------------------

>> make_concat: (Concat _t_str0 y)

>> make_concat: (Concat gr (Concat _t_str0 y))


===================
** cb_reduce_app(): Matches( x, "gr[e]y" )  =>  (= x (Concat gr (Concat _t_str0 y)))
-- ADD(@5021): 
(and true (and (= 1 (Length _t_str0)) (or (= _t_str0 e))) true)
===================
>> make_concat: (Concat _t_str1 y)

>> make_concat: (Concat gr (Concat _t_str1 y))


===================
** cb_reduce_app(): Matches( x, "gr(a|e)y" )  =>  (= x (Concat gr (Concat _t_str1 y)))
-- ADD(@5021): 
(and true (or (and (= _t_str1 a) true) (and (= _t_str1 e) true)) true)
===================

===================
** cb_reduce_app(): Matches( x, "(gray|grey)" )  =>  (= x _t_str2)
-- ADD(@5021): 
(and true (or (and (= _t_str2 gray) true) (and (= _t_str2 grey) true)) true)
===================
>> cb_reduce_eq: (= x grey)

>> Length added for: (= x grey) @ 4349

>> cb_reduce_app(): Length( "grey" ) = 4

>> cb_reduce_app(): concat( "e" , "y" )

>> cb_reduce_app(): concat( "gr" , "ey" )



***********************************************
*               Starting Search               *
-----------------------------------------------
(and (= (+ (Length _t_str0) (* (- 1) (Length (Concat _t_str0 y)))) (- 1))
     (= (+ (Length (Concat _t_str0 y))
           (* (- 1) (Length (Concat gr (Concat _t_str0 y)))))
        (- 2))
     (= (Length _t_str0) 1)
     (= _t_str0 e)
     (= (+ (Length _t_str1) (* (- 1) (Length (Concat _t_str1 y)))) (- 1))
     (= (+ (Length (Concat _t_str1 y))
           (* (- 1) (Length (Concat gr (Concat _t_str1 y)))))
        (- 2))
     (= x grey)
     (>= (Length _t_str1) 0)
     (>= (Length _t_str2) 0)
     (= grey (Concat gr (Concat _t_str1 y)))
     (= grey _t_str2))
***********************************************
>> Input Var Set: x, 


===============================================
** cb_new_eq():    "e" = _t_str0
===============================================
>> New_eq Check: PASS

>> Length added for: (= _t_str0 e) @ 2586

>> [simplifyConcatStr 1 @ 843] (Concat _t_str0 y)

---------------------
Axiom Add(@863, Level 0):
(=> (= _t_str0 e) (= (Concat _t_str0 y) ey))
---------------------

>> [simplifyConcatStr 6 @ 1005] (Concat gr (Concat _t_str0 y))

---------------------
Axiom Add(@1016, Level 0):
(=> (= _t_str0 e) (= (Concat gr (Concat _t_str0 y)) grey))
---------------------



===============================================
** cb_new_eq():    "grey" = x
===============================================
>> New_eq Check: PASS

>> Length added for: (= x grey) @ 2586



===============================================
** cb_new_eq():    "grey" = (Concat gr (Concat _t_str1 y))
===============================================
>> New_eq Check: PASS

>> Length added for: (= (Concat gr (Concat _t_str1 y)) grey) @ 2586

** solve_concat_eq_str: (Concat gr (Concat _t_str1 y)) = "grey"
>> Length added for: (= (Concat _t_str1 y) ey) @ 1271

---------------------
Axiom Add(@1272, Level 0):
(=> (= (Concat gr (Concat _t_str1 y)) grey) (= (Concat _t_str1 y) ey))
---------------------



===============================================
** cb_new_eq():    "grey" = _t_str2
===============================================
>> New_eq Check: PASS

>> Length added for: (= _t_str2 grey) @ 2586



===============================================
** cb_new_eq():    "ey" = (Concat _t_str0 y)
===============================================
>> New_eq Check: PASS

>> Length added for: (= (Concat _t_str0 y) ey) @ 2586

** solve_concat_eq_str: (Concat _t_str0 y) = "ey"
>> [simplifyConcatStr 2 @ 878] (Concat gr (Concat _t_str0 y))

---------------------
Axiom Add(@898, Level 0):
(=> (= (Concat _t_str0 y) ey) (= (Concat gr (Concat _t_str0 y)) grey))
---------------------



===============================================
** cb_new_eq():    "grey" = (Concat gr (Concat _t_str0 y))
===============================================
>> New_eq Check: PASS

>> Length added for: (= (Concat gr (Concat _t_str0 y)) grey) @ 2586

** solve_concat_eq_str: (Concat gr (Concat _t_str0 y)) = "grey"

===============================================
** simplifyConcatEq():
   nn1 = (Concat gr (Concat _t_str1 y))
   nn2 = (Concat gr (Concat _t_str0 y))
===============================================
[simplifyConcatEq] new_nn1 = (Concat gr (Concat _t_str1 y))
                   new_nn2 = "grey" @ 1506
---------------------
Axiom Add(@1528, Level 0):
(=> (= (Concat _t_str0 y) ey) (= (Concat gr (Concat _t_str0 y)) grey))
---------------------

>> [simplifyConcatEq] nn1_new is not concat @ 1542



===============================================
** cb_new_eq():    "ey" = (Concat _t_str1 y)
===============================================
>> New_eq Check: PASS

>> Length added for: (= (Concat _t_str1 y) ey) @ 2586

** solve_concat_eq_str: (Concat _t_str1 y) = "ey"
>> Length added for: (= _t_str1 e) @ 1241

---------------------
Axiom Add(@1242, Level 0):
(=> (= (Concat _t_str1 y) ey) (= _t_str1 e))
---------------------


===============================================
** simplifyConcatEq():
   nn1 = (Concat _t_str0 y)
   nn2 = (Concat _t_str1 y)
===============================================
[simplifyConcatEq] new_nn1 = "ey"
                   new_nn2 = (Concat _t_str1 y) @ 1506
>> [simplifyConcatEq] nn1_new is not concat @ 1536

>> [simplifyConcatStr 2 @ 878] (Concat gr (Concat _t_str1 y))

>> [simplifyConcatStr 2 @ 878] (Concat gr (Concat _t_str1 y))



===============================================
** cb_new_eq():    "e" = _t_str1
===============================================
>> New_eq Check: PASS

>> Length added for: (= _t_str1 e) @ 2586

>> [simplifyConcatStr 1 @ 843] (Concat _t_str1 y)

>> [simplifyConcatStr 6 @ 1005] (Concat gr (Concat _t_str1 y))


*******************************************
[PUSH]: Level = 1
*******************************************

*******************************************
[PUSH]: Level = 2
*******************************************



vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                cb_final_check @ Level [2] 
=============================================================

******************************************
       Dependence Analysis
------------------------------------------
(0) alias: variables
  * x	: _t_str2, 
  * _t_str0	: _t_str1, 

(1) var = constStr:
  x = "grey"
  _t_str0 = "e"

(2) var = concat:
  x = { (Concat gr (Concat _t_str0 y)), (Concat gr (Concat _t_str1 y)), }

(3) concat = constStr:
  (Concat _t_str0 y) = "ey"
  (Concat gr (Concat _t_str0 y)) = "grey"

(4) eq concats:
  >> (Concat _t_str0 y) , (Concat _t_str1 y) , 
  >> (Concat gr (Concat _t_str0 y)) , (Concat gr (Concat _t_str1 y)) , 


-- Dependence Map -----------------
x	-->	_t_str0(2), "grey"(1), 
_t_str0	-->	"e"(1), "grey"(3), "ey"(3), 
-----------------------------------

-- L/R Most Var in eq concat ------
-----------------------------------

-- L/R constraints ----------------
-----------------------------------


 * All non-internal variables are assigned. Done!
###########################################################


*****************************
SAT
-----------------------------
_t_str0 -> e
_t_str1 -> e
_t_str2 -> grey
x -> grey
*****************************

** Reset():

** Delete()
